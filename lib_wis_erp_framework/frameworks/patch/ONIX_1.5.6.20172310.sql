CREATE SEQUENCE IF NOT EXISTS API_HISTORY_SEQ START 1;
CREATE SEQUENCE IF NOT EXISTS DOCUMENT_NUMBER_SEQ START 1;
CREATE SEQUENCE IF NOT EXISTS ENTITY_SEQ START 1;
CREATE SEQUENCE IF NOT EXISTS INVENTORY_DOC_SEQ START 1;
CREATE SEQUENCE IF NOT EXISTS INVENTORY_TX_SEQ START 1;
CREATE SEQUENCE IF NOT EXISTS ITEM_SEQ START 1;
CREATE SEQUENCE IF NOT EXISTS ITEM_BARCODE_SEQ START 1;
CREATE SEQUENCE IF NOT EXISTS ITEM_CATEGORY_SEQ START 1;
CREATE SEQUENCE IF NOT EXISTS LOCATION_SEQ START 1;
CREATE SEQUENCE IF NOT EXISTS LOGIN_HISTORY_SEQ START 1;
CREATE SEQUENCE IF NOT EXISTS LOGIN_SESSION_SEQ START 1;
CREATE SEQUENCE IF NOT EXISTS MASTER_REF_SEQ START 1;
CREATE SEQUENCE IF NOT EXISTS PACKAGE_TYPE_MAP_SEQ START 1;
CREATE SEQUENCE IF NOT EXISTS PATCH_HISTORY_SEQ START 1;
CREATE SEQUENCE IF NOT EXISTS PERMISSION_SEQ START 1;
CREATE SEQUENCE IF NOT EXISTS SEQUENCE_SEQ START 1;
CREATE SEQUENCE IF NOT EXISTS USER_VARIABLE_SEQ START 1;
CREATE SEQUENCE IF NOT EXISTS VOUCHER_TEMPLATE_SEQ START 1;

patch_by_script_MigrateDocumentNumber();

CREATE SEQUENCE TEST_EXTRA_PATCH_SEQ START 1;
DROP SEQUENCE TEST_EXTRA_PATCH_SEQ;


CREATE TABLE BRANCH_CONFIG
(
    BRANCH_CONFIG_ID        INTEGER NOT NULL PRIMARY KEY,
    BRANCH_ID               INTEGER NOT NULL UNIQUE,
    KEY                     TEXT NOT NULL UNIQUE,
    DEF_CASH_ACCOUNT_ID     INTEGER NOT NULL,
    DEF_LOCATION_ID         INTEGER NOT NULL,
    DEF_EMP_ID              INTEGER NOT NULL,
    DOC_NO_CASH_PREFIX      TEXT NOT NULL,
    DOC_NO_CASH_PATTERN     TEXT NOT NULL,
    DOC_NO_DEBT_PREFIX      TEXT NOT NULL,
    DOC_NO_DEBT_PATTERN     TEXT NOT NULL,
    DOC_NO_NV_PREFIX        TEXT NOT NULL,
    DOC_NO_NV_PATTERN       TEXT NOT NULL,

    CREATE_DATE CHAR(19)    NOT NULL,
    MODIFY_DATE CHAR(19)    NOT NULL,

    FOREIGN KEY(BRANCH_ID) REFERENCES MASTER_REF(MASTER_ID),
    FOREIGN KEY(DEF_EMP_ID) REFERENCES EMPLOYEE(EMPLOYEE_ID),
    FOREIGN KEY(DEF_LOCATION_ID) REFERENCES LOCATION(LOCATION_ID),
    FOREIGN KEY(DEF_CASH_ACCOUNT_ID) REFERENCES CASH_ACCOUNT(CASH_ACCOUNT_ID)
);

CREATE SEQUENCE BRANCH_CONFIG_SEQ START 1;

CREATE TABLE BRANCH_CONFIG_POS
(
    BRANCH_POS_ID           INTEGER NOT NULL PRIMARY KEY,
    BRANCH_CONFIG_ID        INTEGER NOT NULL,
    POS_SERIAL_NO           TEXT NOT NULL,

    CREATE_DATE CHAR(19)    NOT NULL,
    MODIFY_DATE CHAR(19)    NOT NULL,

    FOREIGN KEY(BRANCH_CONFIG_ID) REFERENCES BRANCH_CONFIG(BRANCH_CONFIG_ID)
);

CREATE SEQUENCE BRANCH_CONFIG_POS_SEQ START 1;

ALTER TABLE BRANCH_CONFIG ADD COLUMN DOC_NO_CASH_PREFIX_NV TEXT;
ALTER TABLE BRANCH_CONFIG ADD COLUMN DOC_NO_CASH_PATTERN_NV TEXT;
ALTER TABLE BRANCH_CONFIG ADD COLUMN DOC_NO_DEBT_PREFIX_NV TEXT;
ALTER TABLE BRANCH_CONFIG ADD COLUMN DOC_NO_DEBT_PATTERN_NV TEXT;

ALTER TABLE BRANCH_CONFIG DROP COLUMN DOC_NO_NV_PREFIX;
ALTER TABLE BRANCH_CONFIG DROP COLUMN DOC_NO_NV_PATTERN;

ALTER TABLE BRANCH_CONFIG ADD COLUMN DOC_NO_CASH_YEAR_OFFSET INTEGER;
ALTER TABLE BRANCH_CONFIG ADD COLUMN DOC_NO_CASH_RESET_CRITERIA INTEGER;
ALTER TABLE BRANCH_CONFIG ADD COLUMN DOC_NO_CASH_SEQ_LENGTH INTEGER;
UPDATE BRANCH_CONFIG SET DOC_NO_CASH_YEAR_OFFSET = 0, DOC_NO_CASH_RESET_CRITERIA=2, DOC_NO_CASH_SEQ_LENGTH=5;

ALTER TABLE BRANCH_CONFIG ADD COLUMN DOC_NO_DEBT_YEAR_OFFSET INTEGER;
ALTER TABLE BRANCH_CONFIG ADD COLUMN DOC_NO_DEBT_RESET_CRITERIA INTEGER;
ALTER TABLE BRANCH_CONFIG ADD COLUMN DOC_NO_DEBT_SEQ_LENGTH INTEGER;
UPDATE BRANCH_CONFIG SET DOC_NO_DEBT_YEAR_OFFSET = 0, DOC_NO_DEBT_RESET_CRITERIA=2, DOC_NO_DEBT_SEQ_LENGTH=5;

ALTER TABLE BRANCH_CONFIG ADD COLUMN DOC_NO_CASH_NV_YEAR_OFFSET INTEGER;
ALTER TABLE BRANCH_CONFIG ADD COLUMN DOC_NO_CASH_NV_RESET_CRITERIA INTEGER;
ALTER TABLE BRANCH_CONFIG ADD COLUMN DOC_NO_CASH_NV_SEQ_LENGTH INTEGER;
UPDATE BRANCH_CONFIG SET DOC_NO_CASH_NV_YEAR_OFFSET = 0, DOC_NO_CASH_NV_RESET_CRITERIA=2, DOC_NO_CASH_NV_SEQ_LENGTH=5;

ALTER TABLE BRANCH_CONFIG ADD COLUMN DOC_NO_DEBT_NV_YEAR_OFFSET INTEGER;
ALTER TABLE BRANCH_CONFIG ADD COLUMN DOC_NO_DEBT_NV_RESET_CRITERIA INTEGER;
ALTER TABLE BRANCH_CONFIG ADD COLUMN DOC_NO_DEBT_NV_SEQ_LENGTH INTEGER;
UPDATE BRANCH_CONFIG SET DOC_NO_DEBT_NV_YEAR_OFFSET = 0, DOC_NO_DEBT_NV_RESET_CRITERIA=2, DOC_NO_DEBT_NV_SEQ_LENGTH=5;

CREATE TABLE LOG_IMPORT_ISSUE
(
    LOG_IMPORT_ISSUE_ID     INTEGER NOT NULL PRIMARY KEY,
    IMPORT_DATE             CHAR(19) NOT NULL,
    BRANCH_NAME             TEXT NOT NULL,
    IMPORT_BY               TEXT NOT NULL,
    ORIGINAL_DOC            TEXT NOT NULL,
    STATUS                  INTEGER NOT NULL, /* 1=open, 2=resolved */
    REF_ID                  TEXT NULL UNIQUE,

    CREATE_DATE CHAR(19)    NOT NULL,
    MODIFY_DATE CHAR(19)    NOT NULL
);

CREATE SEQUENCE LOG_IMPORT_ISSUE_SEQ START 1;

CREATE TABLE LOG_IMPORT_ERROR
(
    LOG_IMPORT_ERROR_ID     INTEGER NOT NULL PRIMARY KEY,
    LOG_IMPORT_ISSUE_ID     INTEGER NOT NULL,    
    ERROR_DESC              INTEGER NOT NULL,

    CREATE_DATE CHAR(19)    NOT NULL,
    MODIFY_DATE CHAR(19)    NOT NULL,

    FOREIGN KEY(LOG_IMPORT_ISSUE_ID) REFERENCES LOG_IMPORT_ISSUE(LOG_IMPORT_ISSUE_ID)
);

CREATE SEQUENCE LOG_IMPORT_ERROR_SEQ START 1;

ALTER TABLE LOG_IMPORT_ERROR DROP COLUMN ERROR_DESC;
ALTER TABLE LOG_IMPORT_ERROR ADD COLUMN ERROR_DESC TEXT NOT NULL;

ALTER TABLE ACCOUNT_DOC_ITEM ADD COLUMN TOTAL_AFTER_DISCOUNT NUMERIC(12, 4);

ALTER TABLE BRANCH_CONFIG ADD COLUMN DEF_LOCATION_ID_NV INTEGER;
ALTER TABLE BRANCH_CONFIG ADD COLUMN DEF_CASH_ACCOUNT_ID_NV INTEGER;
ALTER TABLE BRANCH_CONFIG ADD FOREIGN KEY(DEF_LOCATION_ID_NV) REFERENCES LOCATION(LOCATION_ID);
ALTER TABLE BRANCH_CONFIG ADD FOREIGN KEY(DEF_CASH_ACCOUNT_ID_NV) REFERENCES CASH_ACCOUNT(CASH_ACCOUNT_ID);

ALTER TABLE LOG_IMPORT_ISSUE ADD COLUMN BRANCH_ID INTEGER;
ALTER TABLE LOG_IMPORT_ISSUE ADD FOREIGN KEY (BRANCH_ID) REFERENCES MASTER_REF(MASTER_ID);
ALTER TABLE LOG_IMPORT_ISSUE ADD COLUMN DOCUMENT_NO TEXT;
ALTER TABLE LOG_IMPORT_ISSUE ADD COLUMN DOCUMENT_DATE CHAR(19);
ALTER TABLE LOG_IMPORT_ISSUE ADD COLUMN DOCUMENT_DESC TEXT;

ALTER TABLE BRANCH_CONFIG ALTER DEF_EMP_ID DROP NOT NULL;


CREATE TABLE GLOBAL_VARIABLE
(
    GLOBAL_VARIABLE_ID      INTEGER NOT NULL PRIMARY KEY,
    VARIABLE_NAME           TEXT NOT NULL UNIQUE,
    VARIABLE_TYPE           INTEGER NOT NULL, /* 1=number, 2=string, 3=boolean */
    VARIABLE_CATEGORY       INTEGER,    
    VARIABLE_VALUE          TEXT,
    VARIABLE_DESC           TEXT,

    CREATE_DATE CHAR(19)    NOT NULL,
    MODIFY_DATE CHAR(19)    NOT NULL
);

INSERT INTO GLOBAL_VARIABLE
(GLOBAL_VARIABLE_ID, VARIABLE_NAME, VARIABLE_TYPE, VARIABLE_CATEGORY, VARIABLE_VALUE, VARIABLE_DESC, CREATE_DATE, MODIFY_DATE)
VALUES
(1, 'MAX_OVERHEAD_APPROVE_DATE', 1, 1, '0', 'Number of day allow between current date and document date to be approved.', '2017/11/14 00:00:00', '2017/11/14 00:00:00');


ALTER TABLE LOG_IMPORT_ISSUE ADD COLUMN MODIFIED_DOC TEXT;

ALTER TABLE BRANCH_CONFIG ADD COLUMN ALLOW_INVENTORY_NEGATIVE CHAR(1);
ALTER TABLE BRANCH_CONFIG ADD COLUMN ALLOW_INVENTORY_NEGATIVE_NV CHAR(1);
ALTER TABLE BRANCH_CONFIG ADD COLUMN ALLOW_CASH_NEGATIVE CHAR(1);
ALTER TABLE BRANCH_CONFIG ADD COLUMN ALLOW_CASH_NEGATIVE_NV CHAR(1);

UPDATE BRANCH_CONFIG SET ALLOW_INVENTORY_NEGATIVE = 'N';
UPDATE BRANCH_CONFIG SET ALLOW_INVENTORY_NEGATIVE_NV = 'N';
UPDATE BRANCH_CONFIG SET ALLOW_CASH_NEGATIVE = 'N';
UPDATE BRANCH_CONFIG SET ALLOW_CASH_NEGATIVE_NV = 'N';


ALTER TABLE LOG_IMPORT_ISSUE ADD COLUMN DOCUMENT_TYPE INTEGER;
UPDATE LOG_IMPORT_ISSUE SET DOCUMENT_TYPE = 1;

CREATE SEQUENCE IF NOT EXISTS INVENTORY_DOC_APPROVED_SEQ START 1;
CREATE SEQUENCE IF NOT EXISTS CASH_DOC_APPROVED_SEQ START 1;
CREATE SEQUENCE IF NOT EXISTS ACCOUNT_DOC_APPROVED_SEQ START 1;


INSERT INTO GLOBAL_VARIABLE
(GLOBAL_VARIABLE_ID, VARIABLE_NAME, VARIABLE_TYPE, VARIABLE_CATEGORY, VARIABLE_VALUE, VARIABLE_DESC, CREATE_DATE, MODIFY_DATE)
VALUES
(2, 'VAT_PERCENTAGE', 1, 1, '7', 'VAT percentage', '2017/11/20 00:00:00', '2017/11/20 00:00:00');


ALTER TABLE ENTITY ADD COLUMN ID_NUMBER TEXT;

CREATE TABLE ENTITY_ADDRESS
(
    ENTITY_ADDRESS_ID       INTEGER NOT NULL PRIMARY KEY,
    ENTITY_ID               INTEGER NOT NULL,
    ADDRESS_TYPE            INTEGER NOT NULL, 
    ENTITY_ADDRESS          TEXT,

    CREATE_DATE CHAR(19)    NOT NULL,
    MODIFY_DATE CHAR(19)    NOT NULL,

    FOREIGN KEY(ENTITY_ID) REFERENCES ENTITY(ENTITY_ID),
    FOREIGN KEY(ADDRESS_TYPE) REFERENCES MASTER_REF(MASTER_ID)
);

CREATE SEQUENCE ENTITY_ADDRESS_SEQ START 1;

patch_by_script_PopulateEntityAddress();

ALTER TABLE ACCOUNT_DOC_ITEM ADD COLUMN ITEM_NOTE TEXT;

patch_by_script_CreateSaleDocumentNumberNV();
