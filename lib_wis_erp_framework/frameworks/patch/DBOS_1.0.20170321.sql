/*
#IBSRevision : 1.0 (03/21/2017)
#AUTHOR  : Seubpong Monsar
#PURPOSE : SQL script
*/

CREATE TABLE LOGIN_HISTORY
(
    LOGIN_ID             INTEGER NOT NULL PRIMARY KEY,
    LOGIN_DATE           CHAR(19) NOT NULL,
    IP_ADDRESS           TEXT,
    USER_NAME            TEXT,
    FAILED_PASSWORD      TEXT,
    LOGIN_SUCCESS        CHAR(1) NOT NULL,
    ERROR_DESC           TEXT,
    
    CREATE_DATE CHAR(19) NOT NULL,
    MODIFY_DATE CHAR(19) NOT NULL
);

CREATE TABLE API_HISTORY
(
    API_HISTORY_ID       INTEGER NOT NULL,
    LOGIN_ID             INTEGER,   
    CALL_DATE            CHAR(19) NOT NULL, 
    API_NAME             TEXT NOT NULL,
    RETURN_CODE          TEXT,
    BYTE_IN              INTEGER,
    BYTE_OUT             INTEGER,
    ERROR_DESC           TEXT,
    
    CREATE_DATE CHAR(19) NOT NULL,
    MODIFY_DATE CHAR(19) NOT NULL
);

CREATE TABLE USER_GROUP
(
    GROUP_ID             INTEGER NOT NULL PRIMARY KEY,
    GROUP_NAME           TEXT NOT NULL UNIQUE,
    DESCRIPTION          TEXT,
    
    CREATE_DATE CHAR(19) NOT NULL,
    MODIFY_DATE CHAR(19) NOT NULL
);

CREATE TABLE USERS
(
    USER_ID              INTEGER NOT NULL PRIMARY KEY,
    USER_NAME            TEXT NOT NULL UNIQUE,
    DESCRIPTION          TEXT,
    PASSWORD             TEXT,
    IS_ENABLE            TEXT,
    IS_ADMIN             TEXT,
    GROUP_ID             INTEGER,
    
    CREATE_DATE CHAR(19) NOT NULL,
    MODIFY_DATE CHAR(19) NOT NULL,
        
    FOREIGN KEY(GROUP_ID) REFERENCES USER_GROUP(GROUP_ID)
);

CREATE TABLE PERMISSION
(
    PERM_ID              INTEGER NOT NULL PRIMARY KEY,
    PERM_NAME            TEXT NOT NULL UNIQUE,
    
    CREATE_DATE CHAR(19) NOT NULL,
    MODIFY_DATE CHAR(19) NOT NULL
);

CREATE TABLE GROUP_PERMISSION
(
    GROUP_ID             INTEGER NOT NULL,
    PERM_ID              INTEGER NOT NULL,
    IS_ALLOWED           TEXT NOT NULL,
    
    CREATE_DATE CHAR(19) NOT NULL,
    MODIFY_DATE CHAR(19) NOT NULL,
    
    FOREIGN KEY(GROUP_ID) REFERENCES USER_GROUP(GROUP_ID),
    FOREIGN KEY(PERM_ID) REFERENCES PERMISSION(PERM_ID),
    UNIQUE (GROUP_ID, PERM_ID)
);

/* MASTER REF */
CREATE TABLE MASTER_REF
(
    MASTER_ID            INTEGER NOT NULL PRIMARY KEY,
    CODE                 TEXT NOT NULL,
    DESCRIPTION          TEXT,
    REF_TYPE             INTEGER NOT NULL, 
    
    CREATE_DATE CHAR(19) NOT NULL,
    MODIFY_DATE CHAR(19) NOT NULL,
    
    UNIQUE (CODE, REF_TYPE)  
);

/* INVENTORY */
CREATE TABLE ITEM
(
    ITEM_ID              INTEGER NOT NULL PRIMARY KEY,
    ITEM_CODE            TEXT NOT NULL UNIQUE,
    ITEM_NAME_ENG        TEXT NOT NULL,
    ITEM_NAME_THAI       TEXT NOT NULL,
    ITEM_TYPE            INTEGER NOT NULL,
    ITEM_UOM             INTEGER NOT NULL,
    FINISH_GOOD_FLAG     TEXT NOT NULL,
    PART_FLAG            TEXT NOT NULL,
    RM_FLAG              TEXT NOT NULL,
    PURCHASE_FLAG        TEXT NOT NULL,
    SALE_FLAG            TEXT NOT NULL,
    PRODUCTION_FLAG      TEXT NOT NULL,
    REFERENCE_CODE       TEXT NOT NULL,
    BRAND                INTEGER,
    
    CREATE_DATE CHAR(19) NOT NULL,
    MODIFY_DATE CHAR(19) NOT NULL,
    
    FOREIGN KEY(ITEM_TYPE) REFERENCES MASTER_REF(MASTER_ID),
    FOREIGN KEY(ITEM_UOM) REFERENCES MASTER_REF(MASTER_ID),
    FOREIGN KEY(BRAND) REFERENCES MASTER_REF(MASTER_ID)
);

CREATE TABLE ITEM_BARCODE
(
    ITEM_BC_ID           INTEGER NOT NULL PRIMARY KEY,
    ITEM_ID              INTEGER NOT NULL,
    BARCODE              TEXT NOT NULL,
    
    CREATE_DATE CHAR(19) NOT NULL,
    MODIFY_DATE CHAR(19) NOT NULL,
    
    FOREIGN KEY(ITEM_ID) REFERENCES ITEM(ITEM_ID)
);

CREATE TABLE LOCATION
(
    LOCATION_ID          INTEGER NOT NULL PRIMARY KEY,
    LOCATION_CODE        TEXT NOT NULL UNIQUE,
    DESCRIPTION          TEXT,
    SALE_FLAG            TEXT NOT NULL,
    LOCATION_TYPE        INTEGER NOT NULL,
    
    CREATE_DATE CHAR(19) NOT NULL,
    MODIFY_DATE CHAR(19) NOT NULL,
    
    FOREIGN KEY(LOCATION_TYPE) REFERENCES MASTER_REF(MASTER_ID)  
);

CREATE TABLE SEQUENCE
(
    SEQUENCE_ID          INTEGER,
    SEQUENCE_NAME        TEXT NOT NULL UNIQUE,
    CURRENT_VALUE        INTEGER NOT NULL,

    CREATE_DATE CHAR(19) NOT NULL,
    MODIFY_DATE CHAR(19) NOT NULL
);

CREATE TABLE INVENTORY_DOC
(
    DOC_ID               INTEGER NOT NULL PRIMARY KEY,
    DOCUMENT_NO          TEXT NOT NULL,
    DOCUMENT_DATE        CHAR(19) NOT NULL,
    DOCUMENT_TYPE        INTEGER NOT NULL,
    DOCUMENT_STATUS      INTEGER NOT NULL,  
    APPROVED_DATE        CHAR(19),
    APPROVED_SEQ         INTEGER,   
    LOCATION_ID1         INTEGER,
    LOCATION_ID2         INTEGER,
    NOTE                 TEXT, 
    
    CREATE_DATE CHAR(19) NOT NULL,
    MODIFY_DATE CHAR(19) NOT NULL,
    
    FOREIGN KEY(LOCATION_ID1) REFERENCES LOCATION(LOCATION_ID),
    FOREIGN KEY(LOCATION_ID2) REFERENCES LOCATION(LOCATION_ID)
);

CREATE TABLE INVENTORY_TX
(
    TX_ID                INTEGER NOT NULL PRIMARY KEY,
    DOC_ID               INTEGER NOT NULL,
    LOCATION_ID          INTEGER NOT NULL,
    ITEM_ID              INTEGER NOT NULL,
    ITEM_QUANTITY        NUMERIC(10,2) NOT NULL, /* From GUI and display in the report */
    ITEM_PRICE           NUMERIC(10,2) NOT NULL,
    ITEM_AMOUNT          NUMERIC(10,2) NOT NULL,
    FIFO_AMOUNT          NUMERIC(10,2) NOT NULL, /* FOR EXPORT */
    AVG_AMOUNT           NUMERIC(10,2) NOT NULL, /* FOR EXPORT */
    TRACKING_HISTORY     TEXT,
    AMOUNT_AVG           NUMERIC(10,2) NOT NULL, /* Display in the report */
    UNIT_PRICE_AVG       NUMERIC(10,2) NOT NULL,
    AMOUNT_FIFO          NUMERIC(10,2) NOT NULL, /* Display in the report */
    UNIT_PRICE_FIFO      NUMERIC(10,2) NOT NULL,

    END_QUANTITY         NUMERIC(10,2),
    END_AMOUNT_AVG       NUMERIC(10,2),
    END_AMOUNT_FIFO      NUMERIC(10,2),
    BEGIN_QUANTITY       NUMERIC(10,2),
    BEGIN_AMOUNT_AVG     NUMERIC(10,2),
    BEGIN_AMOUNT_FIFO    NUMERIC(10,2),
                            
    LOT_NO               TEXT,
    LOT_NOTE             TEXT NOT NULL,    
    TX_TYPE              CHAR(1) NOT NULL, /* I or E */
    FACTOR               NUMERIC(1,0) NOT NULL, /* 1 OR -1 */
    
    CREATE_DATE CHAR(19) NOT NULL,
    MODIFY_DATE CHAR(19) NOT NULL,
    
    FOREIGN KEY(DOC_ID) REFERENCES INVENTORY_DOC(DOC_ID),
    FOREIGN KEY(LOCATION_ID) REFERENCES LOCATION(LOCATION_ID),
    FOREIGN KEY(ITEM_ID) REFERENCES ITEM(ITEM_ID)
);

CREATE TABLE COMPANY_PROFILE
(
    COMPANY_ID           INTEGER NOT NULL PRIMARY KEY,
    CODE                 TEXT NOT NULL,
    TAX_ID               TEXT NOT NULL,  
    COMPANY_NAME_THAI    TEXT,
    COMPANY_NAME_ENG     TEXT,
    OPERATOR_NAME_THAI   TEXT,
    OPERATOR_NAME_ENG    TEXT,
    ADDRESS              TEXT NOT NULL, 
    ADDRESS_ENG          TEXT,
    TELEPHONE            TEXT NOT NULL, 
    FAX                  TEXT, 
    EMAIL                TEXT,
    WEBSITE              TEXT, 
    LOGO                 TEXT, 
    
    CREATE_DATE CHAR(19) NOT NULL,
    MODIFY_DATE CHAR(19) NOT NULL    
);

CREATE TABLE INVENTORY_BALANCE
(
    INV_BALANCE_ID         INTEGER NOT NULL PRIMARY KEY,
    BALANCE_DATE           CHAR(19),
    BALANCE_LEVEL          INTEGER NOT NULL,
    LOCATION_ID            INTEGER NOT NULL,
    ITEM_ID                INTEGER NOT NULL,

    BEGIN_QUANTITY         NUMERIC(10,2) NOT NULL, 
    BEGIN_AMOUNT_AVG       NUMERIC(10,2) NOT NULL,
    BEGIN_UNIT_PRICE_AVG   NUMERIC(10,2) NOT NULL,
    BEGIN_AMOUNT_FIFO      NUMERIC(10,2) NOT NULL,
    BEGIN_UNIT_PRICE_FIFO  NUMERIC(10,2) NOT NULL,

    IN_QUANTITY            NUMERIC(10,2) NOT NULL,
    IN_AMOUNT_AVG          NUMERIC(10,2) NOT NULL,
    IN_AMOUNT_FIFO         NUMERIC(10,2) NOT NULL,
    
    OUT_QUANTITY           NUMERIC(10,2) NOT NULL,
    OUT_AMOUNT_AVG         NUMERIC(10,2) NOT NULL,
    OUT_AMOUNT_FIFO        NUMERIC(10,2) NOT NULL,
                           
    END_QUANTITY           NUMERIC(10,2) NOT NULL,
    END_AMOUNT_AVG         NUMERIC(10,2) NOT NULL,
    END_UNIT_PRICE_AVG     NUMERIC(10,2) NOT NULL,
    END_AMOUNT_FIFO        NUMERIC(10,2) NOT NULL,
    END_UNIT_PRICE_FIFO    NUMERIC(10,2) NOT NULL,

    CREATE_DATE            CHAR(19) NOT NULL,
    MODIFY_DATE            CHAR(19) NOT NULL,
    
    FOREIGN KEY(LOCATION_ID) REFERENCES LOCATION(LOCATION_ID),
    FOREIGN KEY(ITEM_ID) REFERENCES ITEM(ITEM_ID)
);

